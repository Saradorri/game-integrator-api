// Code generated by MockGen. DO NOT EDIT.
// Source: internal/domain/outbox.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	domain "github.com/saradorri/gameintegrator/internal/domain"
)

// MockOutboxRepository is a mock of OutboxRepository interface.
type MockOutboxRepository struct {
	ctrl     *gomock.Controller
	recorder *MockOutboxRepositoryMockRecorder
}

// MockOutboxRepositoryMockRecorder is the mock recorder for MockOutboxRepository.
type MockOutboxRepositoryMockRecorder struct {
	mock *MockOutboxRepository
}

// NewMockOutboxRepository creates a new mock instance.
func NewMockOutboxRepository(ctrl *gomock.Controller) *MockOutboxRepository {
	mock := &MockOutboxRepository{ctrl: ctrl}
	mock.recorder = &MockOutboxRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOutboxRepository) EXPECT() *MockOutboxRepositoryMockRecorder {
	return m.recorder
}

// GetPendingEvents mocks base method.
func (m *MockOutboxRepository) GetPendingEvents(limit int) ([]*domain.OutboxEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPendingEvents", limit)
	ret0, _ := ret[0].([]*domain.OutboxEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPendingEvents indicates an expected call of GetPendingEvents.
func (mr *MockOutboxRepositoryMockRecorder) GetPendingEvents(limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPendingEvents", reflect.TypeOf((*MockOutboxRepository)(nil).GetPendingEvents), limit)
}

// IncrementRetryCount mocks base method.
func (m *MockOutboxRepository) IncrementRetryCount(eventID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IncrementRetryCount", eventID)
	ret0, _ := ret[0].(error)
	return ret0
}

// IncrementRetryCount indicates an expected call of IncrementRetryCount.
func (mr *MockOutboxRepositoryMockRecorder) IncrementRetryCount(eventID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncrementRetryCount", reflect.TypeOf((*MockOutboxRepository)(nil).IncrementRetryCount), eventID)
}

// MarkAsFailed mocks base method.
func (m *MockOutboxRepository) MarkAsFailed(eventID, errMsg string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkAsFailed", eventID, errMsg)
	ret0, _ := ret[0].(error)
	return ret0
}

// MarkAsFailed indicates an expected call of MarkAsFailed.
func (mr *MockOutboxRepositoryMockRecorder) MarkAsFailed(eventID, errMsg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkAsFailed", reflect.TypeOf((*MockOutboxRepository)(nil).MarkAsFailed), eventID, errMsg)
}

// MarkAsProcessed mocks base method.
func (m *MockOutboxRepository) MarkAsProcessed(eventID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkAsProcessed", eventID)
	ret0, _ := ret[0].(error)
	return ret0
}

// MarkAsProcessed indicates an expected call of MarkAsProcessed.
func (mr *MockOutboxRepositoryMockRecorder) MarkAsProcessed(eventID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkAsProcessed", reflect.TypeOf((*MockOutboxRepository)(nil).MarkAsProcessed), eventID)
}

// Save mocks base method.
func (m *MockOutboxRepository) Save(event *domain.OutboxEvent) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", event)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockOutboxRepositoryMockRecorder) Save(event interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockOutboxRepository)(nil).Save), event)
}

// MockOutboxProcessor is a mock of OutboxProcessor interface.
type MockOutboxProcessor struct {
	ctrl     *gomock.Controller
	recorder *MockOutboxProcessorMockRecorder
}

// MockOutboxProcessorMockRecorder is the mock recorder for MockOutboxProcessor.
type MockOutboxProcessorMockRecorder struct {
	mock *MockOutboxProcessor
}

// NewMockOutboxProcessor creates a new mock instance.
func NewMockOutboxProcessor(ctrl *gomock.Controller) *MockOutboxProcessor {
	mock := &MockOutboxProcessor{ctrl: ctrl}
	mock.recorder = &MockOutboxProcessorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOutboxProcessor) EXPECT() *MockOutboxProcessorMockRecorder {
	return m.recorder
}

// ProcessEvent mocks base method.
func (m *MockOutboxProcessor) ProcessEvent(event *domain.OutboxEvent) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessEvent", event)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProcessEvent indicates an expected call of ProcessEvent.
func (mr *MockOutboxProcessorMockRecorder) ProcessEvent(event interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessEvent", reflect.TypeOf((*MockOutboxProcessor)(nil).ProcessEvent), event)
}

// ProcessEvents mocks base method.
func (m *MockOutboxProcessor) ProcessEvents() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessEvents")
	ret0, _ := ret[0].(error)
	return ret0
}

// ProcessEvents indicates an expected call of ProcessEvents.
func (mr *MockOutboxProcessorMockRecorder) ProcessEvents() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessEvents", reflect.TypeOf((*MockOutboxProcessor)(nil).ProcessEvents))
}

// StartBackgroundProcessing mocks base method.
func (m *MockOutboxProcessor) StartBackgroundProcessing() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "StartBackgroundProcessing")
}

// StartBackgroundProcessing indicates an expected call of StartBackgroundProcessing.
func (mr *MockOutboxProcessorMockRecorder) StartBackgroundProcessing() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartBackgroundProcessing", reflect.TypeOf((*MockOutboxProcessor)(nil).StartBackgroundProcessing))
}

// StopBackgroundProcessing mocks base method.
func (m *MockOutboxProcessor) StopBackgroundProcessing() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "StopBackgroundProcessing")
}

// StopBackgroundProcessing indicates an expected call of StopBackgroundProcessing.
func (mr *MockOutboxProcessorMockRecorder) StopBackgroundProcessing() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopBackgroundProcessing", reflect.TypeOf((*MockOutboxProcessor)(nil).StopBackgroundProcessing))
}
