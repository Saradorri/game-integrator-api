// Code generated by MockGen. DO NOT EDIT.
// Source: internal/domain/transaction.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	domain "github.com/saradorri/gameintegrator/internal/domain"
	gorm "gorm.io/gorm"
)

// MockTransactionRepository is a mock of TransactionRepository interface.
type MockTransactionRepository struct {
	ctrl     *gomock.Controller
	recorder *MockTransactionRepositoryMockRecorder
}

// MockTransactionRepositoryMockRecorder is the mock recorder for MockTransactionRepository.
type MockTransactionRepositoryMockRecorder struct {
	mock *MockTransactionRepository
}

// NewMockTransactionRepository creates a new mock instance.
func NewMockTransactionRepository(ctrl *gomock.Controller) *MockTransactionRepository {
	mock := &MockTransactionRepository{ctrl: ctrl}
	mock.recorder = &MockTransactionRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransactionRepository) EXPECT() *MockTransactionRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockTransactionRepository) Create(transaction *domain.Transaction) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", transaction)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockTransactionRepositoryMockRecorder) Create(transaction interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockTransactionRepository)(nil).Create), transaction)
}

// GetByID mocks base method.
func (m *MockTransactionRepository) GetByID(id int64) (*domain.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", id)
	ret0, _ := ret[0].(*domain.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockTransactionRepositoryMockRecorder) GetByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockTransactionRepository)(nil).GetByID), id)
}

// GetByIDForUpdate mocks base method.
func (m *MockTransactionRepository) GetByIDForUpdate(id int64) (*domain.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByIDForUpdate", id)
	ret0, _ := ret[0].(*domain.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByIDForUpdate indicates an expected call of GetByIDForUpdate.
func (mr *MockTransactionRepositoryMockRecorder) GetByIDForUpdate(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByIDForUpdate", reflect.TypeOf((*MockTransactionRepository)(nil).GetByIDForUpdate), id)
}

// GetByProviderTxID mocks base method.
func (m *MockTransactionRepository) GetByProviderTxID(providerTxID string) (*domain.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByProviderTxID", providerTxID)
	ret0, _ := ret[0].(*domain.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByProviderTxID indicates an expected call of GetByProviderTxID.
func (mr *MockTransactionRepositoryMockRecorder) GetByProviderTxID(providerTxID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByProviderTxID", reflect.TypeOf((*MockTransactionRepository)(nil).GetByProviderTxID), providerTxID)
}

// GetByProviderTxIDForUpdate mocks base method.
func (m *MockTransactionRepository) GetByProviderTxIDForUpdate(providerTxID string) (*domain.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByProviderTxIDForUpdate", providerTxID)
	ret0, _ := ret[0].(*domain.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByProviderTxIDForUpdate indicates an expected call of GetByProviderTxIDForUpdate.
func (mr *MockTransactionRepositoryMockRecorder) GetByProviderTxIDForUpdate(providerTxID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByProviderTxIDForUpdate", reflect.TypeOf((*MockTransactionRepository)(nil).GetByProviderTxIDForUpdate), providerTxID)
}

// GetByProviderWithdrawnTxID mocks base method.
func (m *MockTransactionRepository) GetByProviderWithdrawnTxID(providerWithdrawnTxID int64) (*domain.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByProviderWithdrawnTxID", providerWithdrawnTxID)
	ret0, _ := ret[0].(*domain.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByProviderWithdrawnTxID indicates an expected call of GetByProviderWithdrawnTxID.
func (mr *MockTransactionRepositoryMockRecorder) GetByProviderWithdrawnTxID(providerWithdrawnTxID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByProviderWithdrawnTxID", reflect.TypeOf((*MockTransactionRepository)(nil).GetByProviderWithdrawnTxID), providerWithdrawnTxID)
}

// GetByUserID mocks base method.
func (m *MockTransactionRepository) GetByUserID(userID int64, limit, offset int) ([]*domain.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByUserID", userID, limit, offset)
	ret0, _ := ret[0].([]*domain.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByUserID indicates an expected call of GetByUserID.
func (mr *MockTransactionRepositoryMockRecorder) GetByUserID(userID, limit, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByUserID", reflect.TypeOf((*MockTransactionRepository)(nil).GetByUserID), userID, limit, offset)
}

// GetPendingByUserID mocks base method.
func (m *MockTransactionRepository) GetPendingByUserID(userID int64) ([]*domain.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPendingByUserID", userID)
	ret0, _ := ret[0].([]*domain.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPendingByUserID indicates an expected call of GetPendingByUserID.
func (mr *MockTransactionRepositoryMockRecorder) GetPendingByUserID(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPendingByUserID", reflect.TypeOf((*MockTransactionRepository)(nil).GetPendingByUserID), userID)
}

// Update mocks base method.
func (m *MockTransactionRepository) Update(transaction *domain.Transaction) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", transaction)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockTransactionRepositoryMockRecorder) Update(transaction interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockTransactionRepository)(nil).Update), transaction)
}

// UpdateStatus mocks base method.
func (m *MockTransactionRepository) UpdateStatus(id int64, status domain.TransactionStatus) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStatus", id, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateStatus indicates an expected call of UpdateStatus.
func (mr *MockTransactionRepositoryMockRecorder) UpdateStatus(id, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStatus", reflect.TypeOf((*MockTransactionRepository)(nil).UpdateStatus), id, status)
}

// WithTransaction mocks base method.
func (m *MockTransactionRepository) WithTransaction(tx *gorm.DB) domain.TransactionRepository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithTransaction", tx)
	ret0, _ := ret[0].(domain.TransactionRepository)
	return ret0
}

// WithTransaction indicates an expected call of WithTransaction.
func (mr *MockTransactionRepositoryMockRecorder) WithTransaction(tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithTransaction", reflect.TypeOf((*MockTransactionRepository)(nil).WithTransaction), tx)
}

// MockTransactionUseCase is a mock of TransactionUseCase interface.
type MockTransactionUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockTransactionUseCaseMockRecorder
}

// MockTransactionUseCaseMockRecorder is the mock recorder for MockTransactionUseCase.
type MockTransactionUseCaseMockRecorder struct {
	mock *MockTransactionUseCase
}

// NewMockTransactionUseCase creates a new mock instance.
func NewMockTransactionUseCase(ctrl *gomock.Controller) *MockTransactionUseCase {
	mock := &MockTransactionUseCase{ctrl: ctrl}
	mock.recorder = &MockTransactionUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransactionUseCase) EXPECT() *MockTransactionUseCaseMockRecorder {
	return m.recorder
}

// Cancel mocks base method.
func (m *MockTransactionUseCase) Cancel(userID int64, providerTxID string) (*domain.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cancel", userID, providerTxID)
	ret0, _ := ret[0].(*domain.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Cancel indicates an expected call of Cancel.
func (mr *MockTransactionUseCaseMockRecorder) Cancel(userID, providerTxID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cancel", reflect.TypeOf((*MockTransactionUseCase)(nil).Cancel), userID, providerTxID)
}

// Deposit mocks base method.
func (m *MockTransactionUseCase) Deposit(userID int64, amount float64, providerTxID string, providerWithdrawnTxID int64, currency string) (*domain.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Deposit", userID, amount, providerTxID, providerWithdrawnTxID, currency)
	ret0, _ := ret[0].(*domain.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Deposit indicates an expected call of Deposit.
func (mr *MockTransactionUseCaseMockRecorder) Deposit(userID, amount, providerTxID, providerWithdrawnTxID, currency interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Deposit", reflect.TypeOf((*MockTransactionUseCase)(nil).Deposit), userID, amount, providerTxID, providerWithdrawnTxID, currency)
}

// Revert mocks base method.
func (m *MockTransactionUseCase) Revert(userID int64, providerTxID string, amount float64, txType domain.TransactionType) (*domain.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Revert", userID, providerTxID, amount, txType)
	ret0, _ := ret[0].(*domain.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Revert indicates an expected call of Revert.
func (mr *MockTransactionUseCaseMockRecorder) Revert(userID, providerTxID, amount, txType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Revert", reflect.TypeOf((*MockTransactionUseCase)(nil).Revert), userID, providerTxID, amount, txType)
}

// Withdraw mocks base method.
func (m *MockTransactionUseCase) Withdraw(userID int64, amount float64, providerTxID, currency string) (*domain.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Withdraw", userID, amount, providerTxID, currency)
	ret0, _ := ret[0].(*domain.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Withdraw indicates an expected call of Withdraw.
func (mr *MockTransactionUseCaseMockRecorder) Withdraw(userID, amount, providerTxID, currency interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Withdraw", reflect.TypeOf((*MockTransactionUseCase)(nil).Withdraw), userID, amount, providerTxID, currency)
}
